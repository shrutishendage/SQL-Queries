Practise -- 

1) Display the name of all products whose list_price is between 1000 and 2000

-> select product_id, product_name, category_id, model_year, list_price from production.products where list_price between 1000 and 2000;

2) Display the name of all customers who are in New York

->  select first_name,last_name, city from sales.customers where city = 'New York';

3) Display the name of all the brands and count of all the products from that brand.

-> select brand_name,count(product_id) Product_Count from production.products p join production.brands b on p.brand_id = b.brand_id group by brand_name;

4) Display the product_name , category, brand and  list_price of the product whose list_price is highest.

->  select product_name, brand_name, category_name, list_price from production.products p join production.brands b on p.brand_id = b.brand_id join production.categories c on c.category_id = p.category_id order by list_price desc offset 0 rows fetch next 1 row only;

5) Display the product_name , category, brand and  list_price of the product whose list_price is Lowest.

-> select product_name, brand_name, category_name, list_price from production.products p inner join production.brands b on p.brand_id =
b.brand_id join production.categories c on c.category_id = p.category_id order by list_price offset 0 rows fetch next 1 row only;

6) Display the product_name , category, brand and  list_price of the product whose list_price is second highest.

-> select product_name, brand_name, category_name, list_price from production.products p inner join production.brands b on p.brand_id =
b.brand_id join production.categories c on c.category_id = p.category_id order by list_price desc offset 1 rows fetch next 1 row only;

// but not proper exactly -- can have two same value for highest so it will give again highest but next in row

select Top 1 product_name, brand_name, category_name, list_price from production.products p inner join production.brands b on p.brand_id = b.brand_id join production.categories c on c.category_id = p.category_id where list_price <> (select max(list_price) from production.products) order by list_price desc;

7) Display Top 5 the product_name , category, brand and  list_price of the product.

-> select Top 5 product_name, brand_name, category_name, list_price from production.products p inner join production.brands b on p.brand_id = b.brand_id join production.categories c on c.category_id = p.category_id order by list_price desc;

select top 5 list_price from (select distinct list_price from production.products) as distinct_prices order by list_price desc;

8) Display Top 5 the product_name , category, brand and  list_price of the product for each category.

-> select product_name, category_name, product_rank, list_price from (select product_name, category_name, list_price, ROW_NUMBER() over (Partition by category_name order by list_price desc) product_rank from production.products p join production.categories c on p.category_id = c.category_id) t where product_rank < 6;


9) Display the avg list_price of each category.

-> select category_name, avg(p.list_price) Average_price from production.products p join production.categories c on p.category_id = c.category_id group by c.category_name;

10) Display the min and max list_price of each category.

->  select product_name, category_name, list_price, product_rank from (select product_name, category_name, list_price, row_number() over (Partition by category_name order by list_price) product_rank from production.products p join production.categories c on c.category_id = p.category_id) t where product_rank = 1
union all 
select product_name, category_name, list_price, product_rank from (select product_name, category_name, list_price, row_number() over (Partition by category_name order by list_price desc) product_rank from production.products p join production.categories c on c.category_id = p.category_id) t where product_rank = 1;

---------------------------------------------------------------------------------------------------------------------------------

1) select first_name worker_name from worker;

2) select Upper(first_name) worker_name from worker;

3) select distinct department from worker;

4) select first_name+' '+last_name full_name from worker;

5) select * from worker order by first_name;

6) select * from worker order by first_name asc, department desc;

7) select * from worker where first_name in ('vipul','satish');

8) select * from worker where first_name not in ('vipul','satish');

9) select * from worker where department = 'admin';

10) select * from worker where first_name like '%a%';

11) select * from worker where first_name like '%a';

12) select * from worker where first_name like '____ h';

13) select * from worker where salary between 100000 and 500000;

14) select * from worker where year(joining_date)=2009 and month(joining_date)=01;

15) select count(worker_id)Admin_department_worker_count from worker where department = 'admin' group by department; 

16) select department, count(worker_id) Count_of_Workers from worker group by department order by department;

17) select department, count(worker_id) Count_of_Workers from worker group by department order by department desc;

18) select w.*, worker_title from worker w inner join title t on w.worker_id = t.worker_ref_id where worker_title = 'manager';

19) select first_name,last_name,department,worker_title, count(bonus_id) bonus_count from worker w join title t on w.worker_id=t.worker_ref_id join bonus b on b.worker_ref_id=t.worker_ref_id group by first_name,last_name,department,worker_title having count(bonus_id)>1;

20) with ranking_worker as
(
select w.first_name,w.last_name,w.department,worker_title,bonus_amount,row_number() over(order by (select null)) Ranking from worker w join title t on w.worker_id=t.worker_ref_id join bonus b on b.worker_ref_id=t.worker_ref_id)
select * from ranking_worker where ranking%2=1;

21) with ranking_worker as
(
select w.first_name,w.last_name,w.department,worker_title,bonus_amount,row_number() over(order by (select null)) Ranking from worker w join title t on w.worker_id=t.worker_ref_id join bonus b on b.worker_ref_id=t.worker_ref_id)
select * from ranking_worker where ranking%2=0;


--------------------------------------------------------------------------------------------------------------------
queries practise -- 

CREATE SCHEMA SalesManagement;


CREATE TABLE SalesManagement.Salespeople (
    SNUM INT PRIMARY KEY,
    SNAME VARCHAR(255),
    CITY VARCHAR(255),
    COMM DECIMAL(5, 2)
);

INSERT INTO SalesManagement.Salespeople (SNUM, SNAME, CITY, COMM) VALUES
(1001, 'Peel', 'London', 0.12),
(1002, 'Serres', 'San Jose', 0.13),
(1004, 'Motika', 'London', 0.11),
(1007, 'Rifkin', 'Barcelona', 0.15),
(1003, 'AxelRod', 'New York', 0.10),
(1005, 'Fran', 'London', 0.26);




CREATE TABLE SalesManagement.Customers (
    CNUM INT PRIMARY KEY,
    CNAME VARCHAR(255),
    CITY VARCHAR(255),
    RATING INT,
    SNUM INT,
    FOREIGN KEY (SNUM) REFERENCES SalesManagement.Salespeople(SNUM)
);

INSERT INTO SalesManagement.Customers (CNUM, CNAME, CITY, RATING, SNUM) VALUES
(2001, 'Hoffman', 'London', 100, 1001),
(2002, 'Giovanni', 'Rome', 200, 1003),
(2003, 'Liu', 'San Jose', 200, 1002),
(2004, 'Grass', 'Berlin', 300, 1002),
(2006, 'Clemens', 'London', 100, 1001),
(2008, 'Cisneros', 'San Jose', 300, 1007),
(2007, 'Pereira', 'Rome', 100, 1004);


CREATE TABLE SalesManagement.Orders (
    ONUM INT PRIMARY KEY,
    AMT DECIMAL(10, 2),
    ODATE DATE,
    CNUM INT,
    SNUM INT,
    FOREIGN KEY (CNUM) REFERENCES SalesManagement.Customers(CNUM),
    FOREIGN KEY (SNUM) REFERENCES SalesManagement.Salespeople(SNUM)
);

INSERT INTO SalesManagement.Orders (ONUM, AMT, ODATE, CNUM, SNUM) VALUES
(3001, 18.69, '1996-10-03', 2008, 1007),
(3003, 767.19, '1996-10-03', 2001, 1001),
(3002, 1900.10, '1996-10-03', 2007, 1004),
(3005, 5160.45, '1996-10-03', 2003, 1002),
(3006, 1098.16, '1996-10-03', 2008, 1007),
(3009, 1713.23, '1996-10-04', 2002, 1003),
(3007, 75.75, '1996-10-04', 2002, 1003),
(3008, 4723.00, '1996-10-05', 2006, 1001),
(3010, 1309.95, '1996-10-06', 2004, 1002),
(3011, 9891.88, '1996-10-06', 2006, 1001);





queries -- 


1. List all the columns of the Salespeople table.  
-> 	select * from salesmanagement.salespeople;

2. List all customers with a rating of 100.  
-> select * from salesmanagement.customers where rating = 100;

3. Find all records in the Customer table with NULL values in the city column.  
->  select * from salesmanagement.customers where city is null;

4. Find the largest order taken by each salesperson on each date.  
-> select snum,odate,max(amt) Max_amount_by_date_and_salespeople from salesmanagement.orders group by snum,odate;

5. Arrange the Orders table by descending customer number.  
-> 	select * from salesmanagement.orders  order by cnum desc;

6. Find which salespeople currently have orders in the Orders table.  
-> 	select s.*,o.* from salesmanagement.salespeople s join salesmanagement.orders o on s.snum = o.snum;

7. List names of all customers matched with the salespeople serving them.
-> select s.sname, c.cname from salesmanagement.salespeople s join salesmanagement.customers c on s.snum = c.snum;

8. Find the names and numbers of all salespeople who had more than one customer.  
->  select c.snum, sname from salesmanagement.salespeople s join salesmanagement.customers c on s.snum = c.snum group by c.snum,sname having count(cnum)>1;

9. Count the orders of each of the salespeople and output the results in descending order.  
-> select sname,count(onum) order_count from salesmanagement.orders o join salesmanagement.salespeople s on o.snum = s.snum group by sname order by order_count; 

10. List the Customer table if and only if one or more of the customers in the Customer table are  located in San Jose.  
->  select * from salesmanagement.customers where exists (select 1 from salesmanagement.customers where city = 'san jose');

11. Match salespeople to customers according to what city they lived in.  
-> 	select sname,cname,s.city from salesmanagement.salespeople s join salesmanagement.customers c on s.city = c.city;

12. Find the largest order taken by each salesperson.  
->  select sname,max(amt) Largest_order from salesmanagement.salespeople s join salesmanagement.orders o on s.snum = o.snum group by s.sname;

13. Find customers in San Jose who have a rating above 200.  
-> select * from salesmanagement.customers where city = 'san jose' and rating > 200; 

14. List the names and commissions of all salespeople in London.  
-> select sname,comm from salesmanagement.salespeople where city = 'london';

15. List all the orders of salesperson Motika from the Orders table.  
-> select o.*, sname from salesmanagement.orders o join salesmanagement.salespeople s on s.snum = o.snum where sname = 'motika';

16. Find all customers with orders on October 3.  
-> select * from salesmanagement.customers c join salesmanagement.orders o on o.cnum = c.cnum where month(odate)=10 and day(odate)=4;

17. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those  dates where the SUM was not at least 2000.00 above the MAX amount.  
-> select odate, sum(amt) Total_amt_by_date from salesmanagement.orders group by odate having sum(amt) > 2000;

18. Select all orders that had amounts that were greater than at least one of the orders from  October 6.  
-> select * from salesmanagement.orders where amt > any(select amt from salesmanagement.orders where month(odate)=10 and day(odate)=03);

19. Write a query that uses the EXISTS operator to extract all salespeople who have customers  with a rating of 300.  
->  select * from salesmanagement.salespeople s where exists(select 1 from salesmanagement.customers c where c.snum = s.snum and rating = 300);

20. Find all pairs of customers having the same rating.  
-> select c1.cname,c2.cname,c1.rating from salesmanagement.customers c1 join salesmanagement.customers c2 on c1.rating>c2.rating;

21. Find all customers whose CNUM is 1000 above the SNUM of Serres.  
-> select * from salesmanagement.customers where cnum >1000+(select snum from salesmanagement.salespeople where sname = 'serres');

22. Give the salespeople’s commissions as percentages instead of decimal numbers.  
-> select snum,sname,city,cast(cast(comm*100 as int) as varchar(10))+'%' from salesmanagement.salespeople;

23. Find the largest order taken by each salesperson on each date, eliminating those MAX orders  which are less than $3000.00 in value.  
-> select odate, max(amt) max_amount from salesmanagement.orders group by odate having max(amt)>3000;

24. List the largest orders for October 3, for each salesperson.  
-> select odate,sname,max(amt) max_amount from salesmanagement.orders o join salesmanagement.salespeople s on s.snum = o.snum  where month(odate)=10 and day(odate)=03 group by odate,sname;

25. Find all customers located in cities where Serres (SNUM 1002) has customers.  
-> select * from salesmanagement.customers where city in (select c.city from salesmanagement.salespeople s join salesmanagement.customers c on c.snum=s.snum) and snum <> 1002;

26. Select all customers with a rating above 200.00.  
-> select * from salesmanagement.customers where rating>200;

27. Count the number of salespeople currently listing orders in the Orders table. 
-> select count( distinct snum) count_of_salespeople from salesmanagement.customers; 
 
28. Write a query that produces all customers serviced by salespeople with a commission above  12%. Output the customer’s name and the salesperson’s rate of commission. 
-> select * from salesmanagement.customers c join salesmanagement.salespeople s on s.snum = c.snum and comm>0.12;

29. Find salespeople who have multiple customers.  
-> select sname, count(cnum) count_of_customers from salesmanagement.customers c join salesmanagement.salespeople s on c.snum = s.snum group by sname having count(cnum)>1;

30. Find salespeople with customers located in their city.  
->  select * from salesmanagement.customers c join salesmanagement.salespeople s on c.city = s.city;

31. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’. 
-> select * from salesmanagement.salespeople where sname like 'p__l';

32. Write a query that uses a subquery to obtain all orders for the customer named Cisneros.  Assume you do not know his customer number.  
-> select * from salesmanagement.orders where snum = (select snum from salesmanagement.customers where cname = 'cisneros'); 

33. Find the largest orders for Serres and Rifkin. 
-> select snum, max(amt) largest_order from salesmanagement.orders where snum in (select snum from salesmanagement.salespeople where sname in ('serres','rifkin')) group by snum;
 
34. Extract the Salespeople table in the following order : SNUM, SNAME, COMMISSION, CITY.  
-> select SNUM, SNAME, COMM, CITY from salesmanagement.salespeople;

35. Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
-> select * from salesmanagement.customers where cname like '[a-g]%';

36. Select all the possible combinations of customers that you can assign. 
-> select c1.cname,c2.cname from salesmanagement.customers c1 join salesmanagement.customers c2 on c1.cnum>c2.cnum; 

37. Select all orders that are greater than the average for October 4.  
-> select * from salesmanagement.orders where amt > (select avg(amt) from salesmanagement.orders where month(odate) = 10 and day(odate)=04);

38. Write a select command using a corelated subquery that selects the names and numbers of all  customers with ratings equal to the maximum for their city.  
-> select * from salesmanagement.customers o where exists( select 1 from salesmanagement.customers i where i.city=o.city group by city having max(i.rating)=o.rating);

39. Write a query that totals the orders for each day and places the results in descending order.  
-> select odate, count(onum) count_of_orders from salesmanagement.orders group by odate order by count_of_orders desc;

40. Write a select command that produces the rating followed by the name of each customer in  San Jose.  
-> select rating, cname from salesmanagement.customers where city = 'san jose';

41. Find all orders with amounts smaller than any amount for a customer in San Jose.  
-> select * from salesmanagement.orders where amt < any(select amt from SalesManagement.Customers c join SalesManagement.orders o on c.cnum=o.cnum  where CITY='san jose');

-- any means smaller than maximum amount for city in sanjose 

42. Find all orders with above average amounts for their customers.  
-> select * from SalesManagement.orders o where amt>(select avg(amt) from SalesManagement.customers c join SalesManagement.orders o on o.cnum=c.cnum);
			or 
select * from SalesManagement.orders o where amt>(select avg(amt) from SalesManagement.orders);

43. Write a query that selects the highest rating in each city.  
-> select city, max(rating) Highest_rating from SalesManagement.customers group by city;

44. Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00
-> select amt*comm commission, onum, rating from SalesManagement.Salespeople s join SalesManagement.orders o on o.snum=s.snum join SalesManagement.Customers c on c.cnum = o.cnum and rating > 100;
 
45. Count the customers with ratings above San Jose’s average.  
-> select count(cnum) customer_count from salesmanagement.customers where rating > (select avg(rating) from SalesManagement.customers where city = 'san jose')  ;

46. Write a query that produces all pairs of salespeople with themselves as well as duplicate rows  with the order reversed. 
->  select * from salesmanagement.salespeople s1 cross join salesmanagement.salespeople s2;
 
47. Find all salespeople that are located in either Barcelona or London.  
-> 	select * from SalesManagement.Salespeople where city in ('barcelona','london');

48. Find all salespeople with only one customer.  
-> select * from salesmanagement.salespeople where snum in (select snum from SalesManagement.customers group by snum having count(cnum)=1);

49. Write a query that joins the Customer table to itself to find all pairs of customers served by a  single salesperson.
-> select c1.cname, c2.cname,c1.snum,c2.snum from SalesManagement.customers c1 join SalesManagement.customers c2 on c1.snum = c2.snum and c1.cnum> c2.cnum;
  
50. Write a query that will give you all orders for more than $1000.00  
-> select * from SalesManagement.orders where amt > 1000;

51. Write a query that lists each order number followed by the name of the customer who made that order.  
->  select onum, cname from SalesManagement.Customers c join SalesManagement.orders o on o.cnum = c.cnum;

52. Write 2 queries that select all salespeople (by name and number) who have customers in their  cities who they do not service, one using a join and one a corelated subquery. Which solution  is more elegant?  
-> 1) select distinct s.snum, sname from SalesManagement.Salespeople s join SalesManagement.customers c on s.city=c.city and s.snum<>c.snum;

2) select distinct s.snum, sname from SalesManagement.Salespeople s where exists(select 1 from SalesManagement.Customers i where i.city=s.city and i.snum<>s.snum);

53. Write a query that selects all customers whose ratings are equal to or greater than ANY (in the SQL sense) of Serres’? 
-> select * from SalesManagement.customers where rating >= any(select rating from SalesManagement.Salespeople s join SalesManagement.customers c on s.snum = c.snum where sname = 'serres');

 
54. Write 2 queries that will produce all orders taken on October 3 or October 4.  
-> 
	1) select * from SalesManagement.orders where (month(odate)=10 and day(odate)=03) or (month(odate)=10 and day(odate)=04)
	2) select * from SalesManagement.orders where odate in ('1996-10-03','1996-10-04');

55. Write a query that produces all pairs of orders by a given customer. Name that customer and  eliminate duplicates.  
-> select o1.onum , o2.onum, c.cname from SalesManagement.customers c join SalesManagement.orders o1 on o1.cnum = c.cnum join SalesManagement.orders o2 on c.cnum = o2.cnum and o1.onum>o2.onum;

56. Find only those customers whose ratings are higher than every customer in Rome. 
-> select * from SalesManagement.customers where rating > all(select rating from SalesManagement.customers where city = 'rome');
 
57. Write a query on the Customers table whose output will exclude all customers with a rating <=  100.00, unless they are located in Rome.  
-> select * from SalesManagement.customers where rating > 1000 or city = 'rome';

58. Find all rows from the Customers table for which the salesperson number is 1001.  
-> select * from SalesManagement.customers where snum = 1001;

59. Find the total amount in Orders for each salesperson for whom this total is greater than the  amount of the largest order in the table. 
-> select sum(amt),snum from SalesManagement.orders group by snum having sum(amt)>(select max(amt) from SalesManagement.orders) ;

60.  Write a query that selects all salespeople who have no order and use zeroes or NULLs in the amount field to fetch that.
->  select * from SalesManagement.Salespeople s left join SalesManagement.orders o on o.snum = s.snum where amt is null or amt = 0;

61. Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200.  
-> 	select * from SalesManagement.Salespeople s cross join SalesManagement.customers c where s.sname < c.cname and c.rating <200;

62. List all Salespeople’s names and the Commission they have earned.  
-> select sname, sum(amt*comm) comission from SalesManagement.Orders o join SalesManagement.Salespeople s on o.snum = s.snum group by sname;

63. Write a query that produces the names and cities of all customers with the same rating as  Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be  usable if his rating changed. 
-> select * from SalesManagement.customers where rating in (select rating from SalesManagement.customers where cname = 'hoffman') and cname <> 'hoffman';
 
64. Find all salespeople for whom there are customers that follow them in alphabetical order.  
-> select sname, cname from SalesManagement.Salespeople s join SalesManagement.customers c on s.snum = c.snum and sname<cname;

65. Write a query that produces the names and ratings of all customers of all who have above average orders.  
-> select * from SalesManagement.customers where cnum in (select cnum from SalesManagement.orders where amt > (select avg(amt) from SalesManagement.orders));

66. Find the SUM of all purchases from the Orders table.  
-> 	select sum(amt) Total_purchase_amt from SalesManagement.orders;

67. Write a SELECT command that produces the order number, amount and date for all rows in  the order table.  
-> 	select onum, amt, odate from SalesManagement.orders;

68. Count the number of nonNULL rating fields in the Customers table (including repeats).  
-> select count(rating) Rating_count from SalesManagement.customers;

69. Write a query that gives the names of both the salesperson and the customer for each order  after the order number.  
-> select onum,odate,amt,sname,cname from SalesManagement.orders o join SalesManagement.Salespeople s on o.snum = s.snum join SalesManagement.Customers c on c.cnum = o.cnum;

70. List the commissions of all salespeople servicing customers in London.
-> 	select sname, comm , city from SalesManagement.Salespeople where snum in (select snum from SalesManagement.customers where city = 'london');
  
71. Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.  
-> 	select * from SalesManagement.Salespeople s where city <> all(select city from SalesManagement.customers c where c.snum = s.snum);

72. Write a query using the EXISTS operator that selects all salespeople with customers located in  their cities who are not assigned to them.  
-> 	select distinct s.* from SalesManagement.Salespeople s join SalesManagement.customers c on s.city = c.city and s.snum<>c.snum;

73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field  relates the two tables to one another.)  
-> 	select * from SalesManagement.customers where snum in (select snum from SalesManagement.Salespeople where sname in ('motika','peel'));

74. Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.)  
-> 	select odate, count(distinct snum) Salespeople_count from SalesManagement.orders group by odate;

75. Find all orders attributed to salespeople in London.  
-> select * from SalesManagement.orders where snum in (select snum from SalesManagement.Salespeople where city = 'london');

76. Find all orders by customers not located in the same cities as their salespeople.  
-> 	select * from SalesManagement.customers c join SalesManagement.salespeople s on c.snum = s.snum join SalesManagement.orders o on o.cnum = c.cnum where c.city <> s.city;

77. Find all salespeople who have customers with more than one current order.  
-> 	select cnum,snum,count(onum) from SalesManagement.orders group by cnum,snum having count(onum) > 1;

78. Write a query that extracts from the Customers table every customer assigned to a salesperson who currently has at least one other customer (besides the customer being  selected) with orders in the Orders table.  
-> 	select distinct c.* from SalesManagement.customers c join SalesManagement.orders  o on c.cnum = o.cnum and c.snum in (select c.snum from SalesManagement.customers c join SalesManagement.orders o on c.cnum = o.cnum group by c.snum having count(o.cnum)>1);

79. Write a query that selects all customers whose names begin with ‘C’.  
-> select * from SalesManagement.customers where cname like 'c%';

80. Write a query on the Customers table that will find the highest rating in each city. Put the output  in this form : for the city (city) the highest rating is : (rating).  
-> 	select 'for the city '+city+ 'the highest rating is : '+cast(max(rating) as varchar(3))+'.' Info  from SalesManagement.customers group by city;

81. Write a query that will produce the SNUM values of all salespeople with orders currently in the Orders table (without any repeats). 
-> select distinct snum from SalesManagement.orders;
 
82. Write a query that lists customers in descending order of rating. Output the rating field first,  followed by the customer’s names and numbers.  
->  select rating, cname, cnum from SalesManagement.customers;

83. Find the average commission for salespeople in London.  
-> 	select avg(amt*comm) Average_commission from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum where city = 'london';

84. Find all orders credited to the same salesperson who services Hoffman (CNUM 2001).  
-> 	select * from SalesManagement.orders where snum = (select snum from SalesManagement.customers where cname='hoffman')

85. Find all salespeople whose commission is in between 0.10 and 0.12 (both inclusive). 
-> 	select * from SalesManagement.salespeople where comm between 0.10 and 0.12;

86. Write a query that will give you the names and cities of all salespeople in London with a  commission above 0.10.  
-> select sname,city from SalesManagement.salespeople where city = 'London' and comm > 0.10;

87. What will be the output from the following query?  
 SELECT * FROM ORDERS  
 where (amt < 1000 OR NOT (odate = 10/03/1996 AND cnum >  2003)); 
-> SELECT * FROM SalesManagement.orders 
 where (amt < 1000 OR NOT (odate = '1996-10-03' AND cnum >  2003)); 
 // All the orders whose amount is less than 1000 or whose cnum and odate combine should be true
 
88. Write a query that selects each customer’s smallest order.  
-> select min(amt) Lowest_order, cname from SalesManagement.orders o join SalesManagement.customers c on c.snum = o.snum group by cname;

89. Write a query that selects the first customer in alphabetical order whose name begins with G.  
-> select Top 1 * from SalesManagement.customers where cname like 'G%';

90. Write a query that counts the number of different nonNULL city values in the Customers table.  
-> select count(distinct city) City_count from SalesManagement.customers;

91. Find the average amount from the Orders table.  
-> select avg(amt) Average_amount from SalesManagement.orders;

92. What would be the output from the following query?  
 SELECT * FROM ORDERS  
 WHERE NOT (odate = 10/03/96 OR snum > 1006) AND amt >=  1500);  
 -> SELECT * FROM salesmanagement.ORDERS  
 WHERE NOT (odate = '1996-10-03' OR snum > 1006) AND amt >=  150;  
 
93. Find all customers who are not located in San Jose and whose rating is above 200.  
-> select * from SalesManagement.customers where city <> 'san jose' and rating > 200;

94. Give a simpler way to write this query :  
 SELECT snum, sname city, comm FROM salespeople   WHERE (comm > + 0.12 OR comm < 0.14);  
 ->  select snum, sname, city, comm from SalesManagement.salespeople where comm between 0.12 and 0.14;
 
95. Evaluate the following query :  
 SELECT * FROM orders  
 WHERE NOT ((odate = 10/03/96 AND snum > 1002) OR amt > 2000.00);  
 ->  SELECT * FROM salesmanagement.orders WHERE NOT ((odate = '10/03/96' AND snum > 1002) OR amt > 2000.00);
 
96. Which salespersons attend to customers not in the city they have been assigned to?  
->  select * from SalesManagement.Salespeople s join SalesManagement.customers  c on s.snum = c.snum and s.city<>c.city;

97. Which salespeople get commission greater than 0.11 are serving customers rated less than  250?  
-> select * from SalesManagement.Salespeople s join SalesManagement.customers c on s.snum = c.snum and comm>0.11 and rating<250;

98. Which salespeople have been assigned to the same city but get different commission percentages?  
-> 	select * from SalesManagement.Salespeople s1 join SalesManagement.Salespeople s2 on s1.city=s2.city and s1.comm <> s2.comm and s1.sname<s2.sname;

99. Which salesperson has earned the most by way of commission?  
-> 	select top 1 s.snum, s.sname, s.city, s.comm, sum(amt*comm) total_commission from SalesManagement.Salespeople s join SalesManagement.orders o on o.snum = s.snum group by s.snum, s.sname, s.city, s.comm order by total_commission desc;

100.Does the customer who has placed the maximum number of orders have the maximum rating?  
-> 	
With 
	o as(
		Select cnum from (Select cnum,rank() over(order by count(onum)  desc) rn  From salesmanagement.orders group by cnum) as  c_ordcnt where rn=1),
	R as (
		Select cnum from (Select cnum,rank() over(order by rating   desc) rn From salesmanagement.customers) as  c_rat where rn=1)
		
	Select concat(o.cnum, ' has highest rating and also has maximum number of orders') Result from o,r Where o.cnum=r.cnum;

101. Has the customer who has spent the largest amount of money been given the highest rating? 
-> 	 
With 
	o as(
		Select cnum from (Select cnum,rank() over(order by max(amt)  desc) rn  From salesmanagement.orders group by cnum) as  c_ordcnt where rn=1),
	R as (
		Select cnum from (Select cnum,rank() over(order by rating   desc) rn From salesmanagement.customers) as  c_rat where rn=1)
		
	Select concat(o.cnum, ' has highest rating and also has largest amount of money') Result from o,r Where o.cnum=r.cnum;
	
	// empty set means no such data
	
	
	-- CTE to find the customer who has spent the largest amount of money
WITH MaxSpent AS (
    SELECT cnum
    FROM (
        SELECT cnum, RANK() OVER (ORDER BY SUM(amt) DESC) AS rn
        FROM salesmanagement.Orders
        GROUP BY cnum
    ) AS RankedSpending
    WHERE rn = 1
),

-- CTE to find the customer with the highest rating
MaxRating AS (
    SELECT cnum
    FROM (
        SELECT cnum, RANK() OVER (ORDER BY rating DESC) AS rn
        FROM salesmanagement.Customers
    ) AS RankedRatings
    WHERE rn = 1
)

-- Final SELECT to check if the customers are the same
SELECT 
    CASE 
        WHEN s.cnum = r.cnum 
        THEN CONCAT(s.cnum, ' has the highest rating and also has spent the largest amount of money')
        ELSE CONCAT(s.cnum, ' and ', r.cnum, ' are different customers')
    END AS Result
FROM MaxSpent s
CROSS JOIN MaxRating r;


102.List all customers in descending order of customer rating.  
-> select * from SalesManagement.customers order by rating desc;

103.On which days has Hoffman placed orders?  
-> 	select * from SalesManagement.customers order by rating desc;

104.Do all salespeople have different commissions?  
-> 	-- Count the total number of salespeople
SELECT COUNT(*) AS TotalSalespeople
FROM salesmanagement.Salespeople;

-- Count the number of unique commission values
SELECT COUNT(DISTINCT comm) AS UniqueCommissions
FROM salesmanagement.Salespeople;

-- Compare the two counts
SELECT CASE
           WHEN (SELECT COUNT(*) FROM salesmanagement.Salespeople) = (SELECT COUNT(DISTINCT comm) FROM salesmanagement.Salespeople)
           THEN 'TRUE'
           ELSE 'FALSE'
       END AS AllDifferentCommissions;

105.Which salespeople have no orders between 10/03/1996 and 10/05/1996?  
-> 	select * from SalesManagement.Salespeople where snum in (select snum from SalesManagement.orders where odate between '10/03/1996' and '10/05/1996');

106.How many salespersons have succeeded in getting orders?  
-> 	select * from SalesManagement.Salespeople s where exists(select 1 from SalesManagement.orders o where o.snum=s.snum);

107.How many customers have placed orders?  
-> 	select * from SalesManagement.customers c where exists(select 1 from SalesManagement.orders o where o.cnum=c.cnum);

108.On which date has each salesperson booked an order of maximum value?  
-> 	select snum, odate, amt from (select snum, odate, amt, rank() over(partition by snum order by amt desc) Highest_order from SalesManagement.orders) t where Highest_order=1;

109.Who is the most successful salesperson?  
-> 	select top 1 sname, sum(amt) Sales from SalesManagement.Salespeople s join SalesManagement.orders o on o.snum = s.snum group by sname order by sales desc;

110.Who is the worst customer with respect to the company?  
-> select top 1 cname, sum(amt) Sales from SalesManagement.customers c join SalesManagement.orders o on o.cnum = c.cnum group by cname order by sales;
	or
Select top 1 cname,rating,sum(amt) Total_sales,count(onum) Total_orders,rank() over(order by sum(amt)  ) rn 
From salesmanagement.customers c left join salesmanagement.orders o 
On c.cnum=o.cnum
 group by cname,rating;


111.Are all customers not having placed orders greater than 2000 totally been serviced by salespersons Peel or Serres?  
-> 	SELECT 
    CASE 
        WHEN NOT EXISTS (
            SELECT *
            FROM SalesManagement.Customers c
            WHERE NOT EXISTS (
                SELECT *
                FROM SalesManagement.Orders o
                WHERE o.CNUM = c.CNUM
                AND o.AMT <= 2000
            )
            AND c.SNUM NOT IN (
                SELECT SNUM
                FROM SalesManagement.Salespeople
                WHERE SNAME NOT IN ('Peel', 'Serres')
            )
        ) THEN 'true'
        ELSE 'false'
    END AS All_Customers_Serviced;


112.Which customers have the same rating? 
-> select c1.cname, c2.cname from SalesManagement.customers c1 join SalesManagement.customers c2 on c1.rating=c2.rating and c1.cname>c2.cname;
	
113.Find all orders greater than the average for October 4th.  
-> 	select * from SalesManagement.orders where amt > (select avg(amt) from SalesManagement.orders where odate='1996-10-04' group by odate);

114.Which customers have above average orders?  
-> select c.cnum, cname from SalesManagement.orders o join SalesManagement.customers c on c.cnum = o.cnum group by c.cnum,cname having sum(amt) > (select avg(amt) from SalesManagement.orders);

115.List all customers with ratings above San Jose’s average.  
-> 	select * from SalesManagement.customers where rating > (select avg(rating) from SalesManagement.customers where city = 'san jose' group by city );

116.Select the total amount in orders for each salesperson for whom the total is greater than the  amount of the largest order in the table. 
-> 	select snum, sum(amt) Total_sum from SalesManagement.orders group by snum having sum(amt) > (select max(amt) from SalesManagement.orders);
 
117.Give names and numbers of all salespersons who have more than one customer.  
-> 	select sname,snum from SalesManagement.salespeople s where snum in (select c.snum from SalesManagement.customers c where c.snum = s.snum group by snum having count(c.cnum)>1);

118.Select all salespersons by name and number who have customers in their city whom they  don’t service.  
-> 	select s.snum, sname,s.city, cname, c.city from SalesManagement.Salespeople s join SalesManagement.customers c on s.city = c.city and s.snum <> c.snum;

119.Which customers’ rating should be lowered? 
-> 	select top 1 c.cnum,rating,sum(amt) total_amt from SalesManagement.orders o join SalesManagement.customers c on c.cnum = o.cnum group by c.cnum,rating order by total_amt;
 
120.Is there a case for assigning a salesperson to Berlin?  
-> 	select * from SalesManagement.Salespeople s join SalesManagement.customers c on c.snum = s.snum where c.city = 'Berlin';

121.Is there any evidence linking the performance of a salesperson to the commission that he or  she is being paid?
-> 	select s.sname ,s.comm ,sum(amt)*comm total_commission, sum(amt) total_sales from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum join SalesManagement.Customers c on o.cnum = c.cnum group by  s.sname ,s.comm;
  
122.Does the total amount in orders by customer in Rome and London exceed the commission  paid to salespersons in London and New York by more than 5 times?  
-> 	select sum(amt) Total_sales from SalesManagement.orders o join SalesManagement.customers c on c.cnum = o.cnum where city in ('Rome','London');

select sum(amt*comm) Total_commission from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum where city in ('London','New York');

SELECT 
    CASE 
        WHEN total_order_amount > 5 * total_commission_paid THEN 'true'
        ELSE 'false'
    END AS exceeds_five_times
FROM (
    SELECT 
        (SELECT SUM(AMT) 
         FROM SalesManagement.Orders o
         JOIN SalesManagement.Customers c ON o.CNUM = c.CNUM
         WHERE c.CITY IN ('Rome', 'London')) AS total_order_amount,
        (SELECT SUM(COMM) 
         FROM SalesManagement.Salespeople
         WHERE CITY IN ('London', 'New York')) AS total_commission_paid
) AS totals;


123.Which is the date, order number, amt and city for each salesperson (by name) for the  maximum order he has obtained?  
-> 	select odate, onum, amt, city from( select odate, onum, amt, city , rank() over(partition by s.snum order by amt desc) rn from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum) t where rn = 1;;

124.Which salesperson(s) should be fired?  
-> 	select snum,sname,city,comm from (select s.snum,sname,city,comm, rank() over(order by sum(amt)) rn from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum group by s.snum,sname,city,comm) t where rn = 1;

125.What is the total income for the company? 
-> 	select sum(amt)-sum(amt*comm) Total_income from SalesManagement.orders o join SalesManagement.Salespeople s on s.snum = o.snum;











